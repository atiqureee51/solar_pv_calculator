
/* ----------------------------
   Global Variables & Defaults
---------------------------- */
let map = null;
let drawnItems = null;
let currentMarker = null;

let ghiChart = null;
let ambientTempChart = null;
let windChart = null;
let monthlyProductionChart = null;
let costBreakdownChart = null;
let cashflowChart = null;

// Default region settings
const defaults = {
  bangladesh: {
    lat: 23.8103,
    lon: 90.4125,
    systemSize: 5,
    currency: 'BDT',
    installedCost: 80000,
    electricityRate: 0.08,
    federalTaxCredit: 0,
    stateTaxCredit: 0,
    interestRate: 5,
    projectLife: 25,
    maintenanceCost: 1000,
    tilt: 23,
    azimuth: 180
  },
  world: {
    lat: 30.2241,
    lon: -92.0198,
    systemSize: 5,
    currency: 'USD',
    installedCost: 1000,
    electricityRate: 0.12,
    federalTaxCredit: 30,
    stateTaxCredit: 0,
    interestRate: 4,
    projectLife: 25,
    maintenanceCost: 100,
    tilt: 30,
    azimuth: 180
  }
};

// Some default numeric values
const defaultValues = {
  latitude: defaults.bangladesh.lat,
  longitude: defaults.bangladesh.lon,
  systemSize: 5,
  tilt: 30,
  azimuth: 180,
  currency: 'BDT',
  installedCost: 80000,
  electricityRate: 0.08,
  federalTaxCredit: 0,
  stateTaxCredit: 0,
  interestRate: 5,
  projectLife: 25,
  maintenanceCost: 1000
};

// Temperature model parameters
const TEMPERATURE_MODEL_PARAMETERS = {
    'sapm': {
        'open_rack_glass_glass': {'a': -3.47, 'b': -0.0594, 'deltaT': 3},
        'close_mount_glass_glass': {'a': -2.98, 'b': -0.0471, 'deltaT': 1},
        'open_rack_glass_polymer': {'a': -3.56, 'b': -0.0750, 'deltaT': 3},
        'insulated_back_glass_polymer': {'a': -2.81, 'b': -0.0455, 'deltaT': 0},
    },
    'pvsyst': {
        'freestanding': {'u_c': 29.0, 'u_v': 0.0},
        'insulated': {'u_c': 15.0, 'u_v': 0.0}
    }
};

/* ----------------------------
   Initialization Functions
---------------------------- */
function initializeForm() {
    // Initialize temperature model first
    $('#temp-model-family').val('sapm');
    updateTemperatureModelFields();
    
    // Set default SAPM values
    $('#sapm-type').val('open_rack_glass_polymer');
    updateSAPMParameters();
    
    // Hide PVsyst params by default
    $('#pvsyst-params').hide();
    $('#sapm-params').show();
    
    // Initialize collapsible sections
    $('.collapse').collapse('hide');
    
    // Set default form values
    $('#latitude').val(defaultValues.latitude);
    $('#longitude').val(defaultValues.longitude);
    $('#system-size').val(defaultValues.systemSize);
    $('#tilt').val(defaultValues.tilt);
    $('#azimuth').val(defaultValues.azimuth);
    $('#currency').val(defaultValues.currency);
    $('#installed-cost').val(defaultValues.installedCost);
    $('#electricity-rate').val(defaultValues.electricityRate);
    $('#federal-tax-credit').val(defaultValues.federalTaxCredit);
    $('#state-tax-credit').val(defaultValues.stateTaxCredit);
    $('#interest-rate').val(defaultValues.interestRate);
    $('#project-life').val(defaultValues.projectLife);
    $('#maintenance-cost').val(defaultValues.maintenanceCost);

    // By default, region set to "bangladesh"
    $('#region').val('bangladesh');
    handleRegionChange();
}

/* ----------------------------
   Load Components
---------------------------- */
async function loadComponents() {
    try {
        // Load modules
        const moduleResponse = await fetch('/get_modules');
        if (!moduleResponse.ok) {
            throw new Error('Failed to fetch modules');
        }
        const moduleData = await moduleResponse.json();
        const moduleSelect = $('#module-name');
        moduleSelect.empty(); // Clear existing options
        
        if (moduleData.success && Array.isArray(moduleData.modules)) {
            moduleData.modules.forEach(module => {
                moduleSelect.append(new Option(module.replace(/_/g, ' '), module));
            });
        } else {
            throw new Error('Invalid module data format');
        }

        // Load inverters
        const inverterResponse = await fetch('/get_inverters');
        if (!inverterResponse.ok) {
            throw new Error('Failed to fetch inverters');
        }
        const inverterData = await inverterResponse.json();
        const inverterSelect = $('#inverter-name');
        inverterSelect.empty(); // Clear existing options
        
        if (inverterData.success && Array.isArray(inverterData.inverters)) {
            inverterData.inverters.forEach(inverter => {
                inverterSelect.append(new Option(inverter.replace(/_/g, ' '), inverter));
            });
        } else {
            throw new Error('Invalid inverter data format');
        }
    } catch (error) {
        console.error('Failed to load components:', error);
        showError('Failed to load modules and inverters. Please refresh the page.');
    }
}

/* ----------------------------
   Charts Initialization
---------------------------- */
function destroyCharts() {
    if (monthlyProductionChart) monthlyProductionChart.destroy();
    if (ghiChart) ghiChart.destroy();
    if (ambientTempChart) ambientTempChart.destroy();
    if (windChart) windChart.destroy();
    if (cashflowChart) cashflowChart.destroy();
    if (costBreakdownChart) costBreakdownChart.destroy();
}

function initializeCharts() {
    // First destroy existing charts
    destroyCharts();

    // Monthly Production Chart
    const monthlyProductionCtx = document.getElementById('monthly-production-chart');
    if (monthlyProductionCtx) {
        monthlyProductionChart = new Chart(monthlyProductionCtx.getContext('2d'), {
            type: 'bar',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                    label: 'Monthly Energy Production (kWh)',
                    data: Array(12).fill(0),
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Energy (kWh)'
                        }
                    }
                }
            }
        });
    }

    // GHI Chart
    const ghiCtx = document.getElementById('ghi-chart');
    if (ghiCtx) {
        ghiChart = new Chart(ghiCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                    label: 'Global Horizontal Irradiance (W/m²)',
                    data: Array(12).fill(0),
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'GHI (W/m²)'
                        }
                    }
                }
            }
        });
    }

    // Ambient Temperature Chart
    const ambientTempCtx = document.getElementById('ambient-temp-chart');
    if (ambientTempCtx) {
        ambientTempChart = new Chart(ambientTempCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                    label: 'Ambient Temperature (°C)',
                    data: Array(12).fill(0),
                    borderColor: 'rgba(54, 162, 235, 1)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'Temperature (°C)'
                        }
                    }
                }
            }
        });
    }

    // Wind Speed Chart
    const windCtx = document.getElementById('wind-speed-chart');
    if (windCtx) {
        windChart = new Chart(windCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                    label: 'Wind Speed (m/s)',
                    data: Array(12).fill(0),
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Wind Speed (m/s)'
                        }
                    }
                }
            }
        });
    }

    // Cashflow Chart
    const cashflowCtx = document.getElementById('cashflow-chart');
    if (cashflowCtx) {
        cashflowChart = new Chart(cashflowCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: Array.from({length: 26}, (_, i) => i),
                datasets: [{
                    label: 'Cumulative Cashflow ($)',
                    data: Array(26).fill(0),
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'Cumulative Cashflow ($)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Year'
                        }
                    }
                }
            }
        });
    }

    // Cost Breakdown Chart
    const costBreakdownCtx = document.getElementById('cost-breakdown-chart');
    if (costBreakdownCtx) {
        costBreakdownChart = new Chart(costBreakdownCtx.getContext('2d'), {
            type: 'pie',
            data: {
                labels: ['Modules', 'Inverters', 'BOS', 'Installation', 'Other'],
                datasets: [{
                    data: [0, 0, 0, 0, 0],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.8)',
                        'rgba(54, 162, 235, 0.8)',
                        'rgba(255, 206, 86, 0.8)',
                        'rgba(75, 192, 192, 0.8)',
                        'rgba(153, 102, 255, 0.8)'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'System Cost Breakdown'
                    }
                }
            }
        });
    }
}

function updateCharts(response) {
    if (!response || response.error) {
        console.error('Error in response:', response.error);
        return;
    }

    // Update system analysis tab
    $('#annual-energy').text(response.annual_energy.toFixed(2) + ' MWh');
    $('#system-size').text(response.peak_dc_power.toFixed(2) + ' kW');
    $('#system-area').text(response.system_area.toFixed(2) + ' m²');
    $('#performance-ratio').text((response.performance_metrics.performance_ratio * 100).toFixed(2) + '%');
    $('#capacity-factor').text(response.capacity_factor.toFixed(2) + '%');

    // Update system info
    $('#selected-module').text(response.system_info.module);
    $('#selected-inverter').text(response.system_info.inverter);
    $('#selected-tilt').text(response.system_info.tilt + '°');
    $('#selected-azimuth').text(response.system_info.azimuth + '°');
    $('#selected-temp-model').text(response.system_info.temp_model);
    $('#selected-mount').text(response.system_info.mount_type);

    // Update financial metrics
    updateFinancialMetrics(response);

    // Update all charts
    updateMonthlyProductionChart(response.production_data.monthly_production);
    updateDailyProductionChart(response.production_data.daily_profile);
    updateTemperatureChart(response.production_data.daily_temp);
    updateWeatherCharts(response.weather_data);
}

function updateFinancialMetrics(response) {
    const financials = response.financial_metrics;
    const total_cost = financials.total_cost;
    const cost_per_watt = financials.cost_per_watt;
    const cost_breakdown = financials.cost_breakdown;
    
    // Calculate annual revenue
    const electricity_rate = 0.12;  // Example electricity rate per kWh
    const annual_revenue = response.annual_energy * 1000 * electricity_rate;
    const project_life = 25;

    // Calculate LCOE
    const lcoe = total_cost / (response.annual_energy * 1000 * project_life);
    
    // Calculate simple payback
    const simple_payback = total_cost / annual_revenue;

    // Calculate NPV
    const discount_rate = 0.06;
    let npv = -total_cost;
    for (let i = 1; i <= project_life; i++) {
        npv += annual_revenue / Math.pow(1 + discount_rate, i);
    }

    // Update financial metrics
    $('#lcoe').text(lcoe.toFixed(3) + ' $/kWh');
    $('#payback').text(simple_payback.toFixed(1) + ' years');
    $('#npv').text('$' + npv.toFixed(2));
    $('#annual-savings').text('$' + annual_revenue.toFixed(2));
    $('#total-investment').text('$' + total_cost.toFixed(2));
    $('#cost-per-watt').text('$' + cost_per_watt.toFixed(2) + '/W');

    // Update cost breakdown
    $('#modules-cost').text('$' + cost_breakdown.modules.toFixed(2));
    $('#inverters-cost').text('$' + cost_breakdown.inverters.toFixed(2));
    $('#bos-cost').text('$' + cost_breakdown.bos.toFixed(2));
    $('#installation-cost').text('$' + cost_breakdown.installation.toFixed(2));
    $('#other-cost').text('$' + cost_breakdown.other.toFixed(2));

    // Update cashflow chart
    updateCashflowChart(total_cost, annual_revenue, project_life, discount_rate);
}

function updateMonthlyProductionChart(monthlyData) {
    const ctx = document.getElementById('monthly-production-chart').getContext('2d');
    const months = Object.keys(monthlyData);
    const values = Object.values(monthlyData);

    if (window.monthlyChart) {
        window.monthlyChart.destroy();
    }

    window.monthlyChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [{
                label: 'Monthly Energy Production (MWh)',
                data: values,
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            aspectRatio: 2,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Energy (MWh)'
                    }
                }
            }
        }
    });
}

function updateDailyProductionChart(dailyData) {
    const ctx = document.getElementById('daily-production-chart').getContext('2d');
    const hours = Array.from({length: 24}, (_, i) => i);

    if (window.dailyChart) {
        window.dailyChart.destroy();
    }

    window.dailyChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: hours,
            datasets: [{
                label: 'Power Output (kW)',
                data: dailyData,
                borderColor: 'rgba(75, 192, 192, 1)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Power (kW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
}

function updateTemperatureChart(tempData) {
    const ctx = document.getElementById('temperature-profile-chart').getContext('2d');
    const hours = Array.from({length: 24}, (_, i) => i);

    if (window.tempChart) {
        window.tempChart.destroy();
    }

    window.tempChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: hours,
            datasets: [{
                label: 'Cell Temperature (°C)',
                data: tempData,
                borderColor: 'rgba(255, 99, 132, 1)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
}

function updateCashflowChart(totalCost, annualRevenue, projectLife, discountRate) {
    const ctx = document.getElementById('cashflow-chart').getContext('2d');
    const years = Array.from({length: projectLife + 1}, (_, i) => i);
    const cashflow = years.map(year => {
        if (year === 0) return -totalCost;
        return annualRevenue;
    });
    const cumulativeCashflow = years.map((_, i) => {
        return cashflow.slice(0, i + 1).reduce((a, b) => a + b, 0);
    });

    if (window.cashflowChart) {
        window.cashflowChart.destroy();
    }

    window.cashflowChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: years,
            datasets: [{
                label: 'Cumulative Cashflow ($)',
                data: cumulativeCashflow,
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Cumulative Cashflow ($)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Year'
                    }
                }
            }
        }
    });
}

function updateWeatherCharts(data) {
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    // Update GHI chart
    const ghiCtx = document.getElementById('ghi-chart').getContext('2d');
    if (ghiChart) {
        ghiChart.destroy();
    }

    const monthlyGHI = data.monthly.ghi.map(v => v / 1000); // Convert to kWh/m²
    ghiChart = new Chart(ghiCtx, {
        type: 'line',
        data: {
            labels: months,
            datasets: [{
                label: 'Monthly GHI (kWh/m²)',
                data: monthlyGHI,
                borderColor: 'rgba(255, 159, 64, 1)',
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                tension: 0.1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            aspectRatio: 2,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'GHI (kWh/m²)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Month'
                    }
                }
            }
        }
    });

    // Update temperature chart
    const tempCtx = document.getElementById('ambient-temp-chart').getContext('2d');
    if (ambientTempChart) {
        ambientTempChart.destroy();
    }

    ambientTempChart = new Chart(tempCtx, {
        type: 'line',
        data: {
            labels: months,
            datasets: [{
                label: 'Average Temperature (°C)',
                data: data.monthly.temperature,
                borderColor: 'rgba(153, 102, 255, 1)',
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                tension: 0.1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            aspectRatio: 2,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Month'
                    }
                }
            }
        }
    });

    // Update wind speed chart
    const windCtx = document.getElementById('wind-speed-chart').getContext('2d');
    if (windChart) {
        windChart.destroy();
    }

    windChart = new Chart(windCtx, {
        type: 'line',
        data: {
            labels: months,
            datasets: [{
                label: 'Average Wind Speed (m/s)',
                data: data.monthly.wind_speed,
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.1,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            aspectRatio: 2,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Wind Speed (m/s)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Month'
                    }
                }
            }
        }
    });

    // Update weather analysis summary
    updateWeatherAnalysis(data.monthly);
}

function updateWeatherAnalysis(monthlyData) {
    const avgGHI = monthlyData.ghi.reduce((a, b) => a + b, 0) / 12 / 1000;
    const maxGHI = Math.max(...monthlyData.ghi) / 1000;
    const minGHI = Math.min(...monthlyData.ghi) / 1000;
    
    const avgTemp = monthlyData.temperature.reduce((a, b) => a + b, 0) / 12;
    const maxTemp = Math.max(...monthlyData.temperature);
    const minTemp = Math.min(...monthlyData.temperature);
    
    const avgWind = monthlyData.wind_speed.reduce((a, b) => a + b, 0) / 12;

    const analysisPoints = [
        Average annual solar resource (GHI): ${avgGHI.toFixed(2)} kWh/m²/day,
        Peak solar month: ${maxGHI.toFixed(2)} kWh/m²/day,
        Minimum solar month: ${minGHI.toFixed(2)} kWh/m²/day,
        Average temperature: ${avgTemp.toFixed(1)}°C,
        Temperature range: ${minTemp.toFixed(1)}°C to ${maxTemp.toFixed(1)}°C,
        Average wind speed: ${avgWind.toFixed(1)} m/s
    ];

    const weatherAnalysisList = document.getElementById('weather-analysis-points');
    weatherAnalysisList.innerHTML = analysisPoints.map(point => <li>${point}</li>).join('');
}

/* ----------------------------
   On Document Ready
---------------------------- */
$(document).ready(function() {
    try {
        initializeForm();
        setTimeout(() => {
            initMap();
            initializeCharts();
            loadComponents();
            setupEventHandlers();
            
            // Show initial status
            $('#status-message')
                .removeClass('d-none alert-danger')
                .addClass('alert-info')
                .text('Ready to calculate. Fill in the form and click Calculate.');
            
        }, 100); // Small delay to ensure DOM is fully ready
            
    } catch (error) {
        console.error('Initialization error:', error);
        showError('Failed to initialize the application. Please refresh the page.');
    }
});

function handleRegionChange() {
  const region = $('#region').val();
  const regionDefaults = defaults[region] || defaults.bangladesh;

  $('#latitude').val(regionDefaults.lat);
  $('#longitude').val(regionDefaults.lon);
  $('#system-size').val(regionDefaults.systemSize);
  $('#currency').val(regionDefaults.currency);
  $('#installed-cost').val(regionDefaults.installedCost);
  $('#electricity-rate').val(regionDefaults.electricityRate);
  $('#federal-tax-credit').val(regionDefaults.federalTaxCredit);
  $('#state-tax-credit').val(regionDefaults.stateTaxCredit);
  $('#interest-rate').val(regionDefaults.interestRate);
  $('#project-life').val(regionDefaults.projectLife);
  $('#maintenance-cost').val(regionDefaults.maintenanceCost);
  $('#tilt').val(regionDefaults.tilt);
  $('#azimuth').val(regionDefaults.azimuth);

  // Update map
  if (map) {
    map.setView([regionDefaults.lat, regionDefaults.lon], 10);
    if (currentMarker) {
      map.removeLayer(currentMarker);
    }
    currentMarker = L.marker([regionDefaults.lat, regionDefaults.lon]).addTo(map);
  }
}

function initMap() {
    // Check if map is already initialized
    if (map) {
        console.log('Map already initialized');
        return;
    }

    try {
        // Initialize the map
        map = L.map('map').setView([23.8103, 90.4125], 13);
        
        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: ' OpenStreetMap contributors'
        }).addTo(map);

        // Initialize the FeatureGroup to store editable layers
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        // Add initial marker
        currentMarker = L.marker([23.8103, 90.4125], {
            draggable: true
        }).addTo(map);

        // Update coordinates when marker is dragged
        currentMarker.on('dragend', function(event) {
            const position = event.target.getLatLng();
            $('#latitude').val(position.lat.toFixed(4));
            $('#longitude').val(position.lng.toFixed(4));
        });

        // Update marker when coordinates are changed manually
        $('#latitude, #longitude').on('change', function() {
            const lat = parseFloat($('#latitude').val());
            const lng = parseFloat($('#longitude').val());
            if (!isNaN(lat) && !isNaN(lng)) {
                currentMarker.setLatLng([lat, lng]);
                map.setView([lat, lng]);
            }
        });
    } catch (error) {
        console.error('Map initialization error:', error);
        showError('Failed to initialize map');
    }
}

function updateDashboard(data) {
    // Update top dashboard metrics
    $('#total-production').text(${Math.round(data.annual_energy).toLocaleString()} kWh);
    $('#cost-savings').text($${Math.round(data.annual_savings).toLocaleString()});
    $('#payback-period').text(${data.payback_period.toFixed(1)} yrs);
    $('#co2-savings').text(${Math.round(data.co2_savings).toLocaleString()} tons);
}

function updateSystemAnalysis(result) {
    // Update system performance
    $('#sa-annual-energy').text(result.annual_energy.toFixed(2) + ' MWh');
    $('#sa-peak-dc').text(result.peak_dc_power.toFixed(2) + ' kW');
    $('#sa-performance-ratio').text((result.performance_metrics.performance_ratio * 100).toFixed(1) + '%');
    $('#sa-capacity-factor').text(result.capacity_factor.toFixed(2) + '%');
    $('#sa-reference-yield').text(result.performance_metrics.reference_yield.toFixed(2) + ' kWh/m²');
    $('#sa-final-yield').text(result.performance_metrics.final_yield.toFixed(2) + ' kWh/m²');
  
    // Calculate financial metrics
    const electricityRate = parseFloat($('#electricity-rate').val()) || 0.08;
    const annualSavings = result.annual_energy * 1000 * electricityRate;
    const installedCostPerW = parseFloat($('#installed-cost').val()) || 6000;
    const systemSizeW = result.peak_dc_power * 1000;
    const totalCapitalCost = installedCostPerW * systemSizeW;
    const projectLife = 25;
    const totalSavings = annualSavings * projectLife;
    const netProfit = totalSavings - totalCapitalCost;
    const lcoe = totalCapitalCost / (result.annual_energy * 1000 * projectLife);
  
    // Update financial summary
    $('#sa-capital-cost').text($${totalCapitalCost.toFixed(2)});
    $('#sa-annual-savings').text($${annualSavings.toFixed(2)});
    $('#sa-payback').text(${(totalCapitalCost / annualSavings).toFixed(1)} years);
    $('#sa-total-savings').text($${totalSavings.toFixed(2)});
    $('#sa-net-profit').text($${netProfit.toFixed(2)});
    $('#sa-lcoe').text($${lcoe.toFixed(4)}/kWh);
}

function updateTemperatureModelDefaults(systemType) {
    let defaultModelFamily = 'sapm';
    let defaultModelType = 'open_rack_glass_polymer';

    switch(systemType) {
        case 'ground-mounted':
            defaultModelFamily = 'sapm';
            defaultModelType = 'open_rack_glass_polymer';
            break;
        case 'rooftop':
            defaultModelFamily = 'sapm';
            defaultModelType = 'close_mount_glass_glass';
            break;
        case 'floating':
            defaultModelFamily = 'pvsyst';
            defaultModelType = 'freestanding';
            break;
        case 'agrivoltaics':
            defaultModelFamily = 'sapm';
            defaultModelType = 'open_rack_glass_polymer';
            break;
    }

    $('#temp-model-family').val(defaultModelFamily).trigger('change');
    if (defaultModelFamily === 'sapm') {
        $('#sapm-type').val(defaultModelType).trigger('change');
    } else {
        $('#pvsyst-type').val(defaultModelType).trigger('change');
    }
}

/* ----------------------------
   Temperature Model Handling
---------------------------- */
function updateTemperatureModelFields() {
    const modelFamily = $('#system-temp-model').val();
    const customParams = $('#custom-temp-params');
    const sapmParams = $('#sapm-params');
    const pvsystParams = $('#pvsyst-params');

    customParams.show();
    if (modelFamily === 'sapm') {
        sapmParams.show();
        pvsystParams.hide();
        // Set default SAPM values if empty
        if (!$('#param-a').val()) $('#param-a').val(-3.56);
        if (!$('#param-b').val()) $('#param-b').val(-0.075);
        if (!$('#param-deltaT').val()) $('#param-deltaT').val(3);
    } else {
        sapmParams.hide();
        pvsystParams.show();
        // Set default PVsyst values if empty
        if (!$('#param-u-c').val()) $('#param-u-c').val(29.0);
        if (!$('#param-u-v').val()) $('#param-u-v').val(0);
    }
}

function handleTemperatureModelChange() {
    const selectedModel = $('#temp-model-family').val();
    if (selectedModel === 'pvsyst') {
        $('#sapm-params').hide();
        $('#pvsyst-params').show();
        updatePVsystParameters();
    } else {
        $('#pvsyst-params').hide();
        $('#sapm-params').show();
        updateSAPMParameters();
    }
}

function updateSAPMParameters() {
    const selectedType = $('#sapm-type').val();
    const params = TEMPERATURE_MODEL_PARAMETERS.sapm[selectedType];
    
    if (params) {
        $('#param-a').val(params.a);
        $('#param-b').val(params.b);
        $('#param-deltaT').val(params.deltaT);
    }
}

function updatePVsystParameters() {
    const selectedType = $('#pvsyst-type').val();
    const params = TEMPERATURE_MODEL_PARAMETERS.pvsyst[selectedType];
    
    if (params) {
        $('#param-u-c').val(params.u_c);
        $('#param-u-v').val(params.u_v);
    }
}

// Initialize event handlers
$('#temp-model-family').change(handleTemperatureModelChange);
$('#sapm-type').change(updateSAPMParameters);
$('#pvsyst-type').change(updatePVsystParameters);

// Fix for infinite expanding tabs
$('.tab-pane').css('max-height', '800px').css('overflow-y', 'auto');

/* ----------------------------
   Show/Hide Loading Spinner
---------------------------- */
function showLoading() {
  $('#loading-spinner').removeClass('d-none');
}
function hideLoading() {
  $('#loading-spinner').addClass('d-none');
}

/* ----------------------------
   Toast Notifications
---------------------------- */
function showToast(message, type = 'success') {
  const toast = document.createElement('div');
  toast.className = toast ${type === 'success' ? 'bg-success' : 'bg-danger'} text-white position-fixed bottom-0 end-0 m-3;
  toast.style.zIndex = '1050';
  toast.innerHTML = 
    <div class="toast-body">
      ${message}
    </div>
  ;
  document.body.appendChild(toast);

  const removeToast = () => {
    if (toast && toast.parentNode) {
      toast.parentNode.removeChild(toast);
    }
  };
  setTimeout(removeToast, 3000);
}

// Helper for error messages
function showError(message) {
  // You can do a toast, or update #status-message:
  $('#status-message')
    .removeClass('alert-info alert-success')
    .addClass('alert-danger')
    .removeClass('d-none')
    .text(Error: ${message});
}

// Helper for success messages
function showSuccess(message) {
  $('#status-message')
    .removeClass('alert-info alert-danger')
    .addClass('alert-success')
    .removeClass('d-none')
    .text(message);
}

function updateCharts(data) {
    // Update production charts
    updateProductionTab(data);
    
    // Update weather charts
    updateWeatherTab(data);
    
    // Update financial charts
    updateFinancialTab(data);
    
    // Update system analysis
    updateSystemAnalysis(data);
}

function updateDashboard(data) {
    // Update top dashboard metrics
    $('#total-production').text(Math.round(data.annual_energy).toLocaleString() + ' kWh');
    $('#cost-savings').text('$' + Math.round(data.annual_savings).toLocaleString());
    $('#payback-period').text(data.payback_period.toFixed(1) + ' yrs');
    $('#co2-savings').text(Math.round(data.co2_savings).toLocaleString() + ' tons');
}

function updateSystemAnalysis(data) {
    // Update system metrics
    $('#peak-power').text(data.peak_dc_power.toFixed(2) + ' kW');
    $('#annual-production').text(Math.round(data.annual_energy).toLocaleString() + ' kWh');
    $('#performance-ratio').text((data.performance_ratio * 100).toFixed(2) + '%');
    $('#capacity-factor').text((data.capacity_factor * 100).toFixed(2) + '%');
    
    // Update financial metrics
    $('#lcoe-value').text(data.lcoe.toFixed(3) + ' $/kWh');
    $('#npv-value').text('$' + Math.round(data.npv).toLocaleString());
}

function updateProductionTab(data) {
    if (!data.production_data) return;
    
    // Update daily production chart
    if (dailyProductionChart) {
        dailyProductionChart.destroy();
    }
    
    const ctx = document.getElementById('daily-production-chart').getContext('2d');
    dailyProductionChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: Array.from({length: 24}, (_, i) => ${i}:00),
            datasets: [{
                label: 'Hourly Production',
                data: data.production_data.daily,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Power (kW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Update monthly production chart
    if (monthlyProductionChart) {
        monthlyProductionChart.destroy();
    }
    
    const monthlyCtx = document.getElementById('monthly-production-chart').getContext('2d');
    monthlyProductionChart = new Chart(monthlyCtx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [{
                label: 'Monthly Production',
                data: data.production_data.monthly,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgb(75, 192, 192)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Energy (kWh)'
                    }
                }
            }
        }
    });
}

function updateWeatherTab(data) {
    if (!data.weather_data) return;
    
    // Update temperature profile chart
    if (temperatureChart) {
        temperatureChart.destroy();
    }
    
    const tempCtx = document.getElementById('temperature-profile-chart').getContext('2d');
    temperatureChart = new Chart(tempCtx, {
        type: 'line',
        data: {
            labels: Array.from({length: 24}, (_, i) => ${i}:00),
            datasets: [{
                label: 'Daily Temperature Profile',
                data: data.weather_data.temperature,
                borderColor: 'rgb(255, 99, 132)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Update monthly GHI chart
    if (monthlyGHIChart) {
        monthlyGHIChart.destroy();
    }
    
    const ghiCtx = document.getElementById('monthly-ghi-chart').getContext('2d');
    monthlyGHIChart = new Chart(ghiCtx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [{
                label: 'Monthly Solar Irradiance',
                data: data.weather_data.monthly_ghi,
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                borderColor: 'rgb(255, 159, 64)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'GHI (Wh/m²)'
                    }
                }
            }
        }
    });
}

function updateFinancialTab(data) {
    // Update financial metrics in the financial tab
    $('#lcoe-breakdown').text(data.lcoe.toFixed(3) + ' $/kWh');
    $('#payback-breakdown').text(data.payback_period.toFixed(1) + ' years');
    $('#savings-breakdown').text('$' + Math.round(data.annual_savings).toLocaleString());
    $('#npv-breakdown').text('$' + Math.round(data.npv).toLocaleString());
}

$(document).ready(function() {
    // Load modules
    $.get('/get_modules', function(response) {
        if (response.success) {
            const moduleSelect = $('#module-name');
            moduleSelect.empty();
            response.modules.forEach(module => {
                moduleSelect.append($('<option>', {
                    value: module,
                    text: module.replace(/_/g, ' ')
                }));
            });
        }
    });

    // Load inverters
    $.get('/get_inverters', function(response) {
        if (response.success) {
            const inverterSelect = $('#inverter-name');
            inverterSelect.empty();
            response.inverters.forEach(inverter => {
                inverterSelect.append($('<option>', {
                    value: inverter,
                    text: inverter.replace(/_/g, ' ')
                }));
            });
        }
    });

    // Handle temperature model changes
    $('#temp-model-family').change(function() {
        const model = $(this).val();
        if (model === 'pvsyst') {
            $('#sapm-params').hide();
            $('#pvsyst-params').show();
        } else {
            $('#pvsyst-params').hide();
            $('#sapm-params').show();
        }
    });

    // Set initial temperature model visibility
    $('#temp-model-family').trigger('change');
});

function getTemperatureModelParams() {
    const model = $('#temp-model-family').val();
    const systemType = $('#system-type').val();
    let params = {};
    
    if (model === 'pvsyst') {
        const mountType = $('#pvsyst-type').val();
        params = {
            model: 'pvsyst',
            mount_type: mountType,
            racking_model: mountType === 'freestanding' ? 'open_rack' : 'close_mount',
            module_type: 'glass_polymer',
            params: {
                u_c: parseFloat($('#param-u-c').val()) || 29.0,
                u_v: parseFloat($('#param-u-v').val()) || 0.0
            }
        };
    } else {
        const mountType = $('#sapm-type').val();
        params = {
            model: 'sapm',
            mount_type: mountType,
            racking_model: mountType.includes('open_rack') ? 'open_rack' : 'close_mount',
            module_type: mountType.includes('glass_glass') ? 'glass_glass' : 'glass_polymer',
            params: {
                a: parseFloat($('#param-a').val()) || -3.47,
                b: parseFloat($('#param-b').val()) || -0.0594,
                deltaT: parseFloat($('#param-deltaT').val()) || 3
            }
        };
    }
    
    return params;
}

function updateCharts(response) {
    if (!response || response.error) {
        console.error('Error in response:', response.error);
        return;
    }

    const data = response.data;
    
    // Update summary metrics
    updateSummaryMetrics(data.summary);
    
    // Update financial tab
    updateFinancialTab(data.summary);
    
    // Update monthly production chart
    updateMonthlyChart(data.monthly);
    
    // Update daily profile charts
    updateDailyProfileCharts(data.hourly);
    
    // Update system info
    updateSystemInfo(data.system_info);
}

function updateSummaryMetrics(summary) {
    if (!summary) return;
    
    $('#annual-energy').text(summary.annual_energy.toFixed(2));
    $('#capacity-factor').text(summary.capacity_factor.toFixed(2));
    $('#system-size-output').text(summary.system_size.toFixed(2));
}

function updateFinancialTab(summary) {
    if (!summary) return;
    
    $('#total-cost').text('$' + summary.total_cost.toFixed(2));
    $('#annual-revenue').text('$' + summary.annual_revenue.toFixed(2));
    $('#simple-payback').text(summary.simple_payback.toFixed(2));
}

function updateMonthlyChart(monthlyData) {
    if (!monthlyData) return;
    
    const ctx = document.getElementById('monthly-production-chart').getContext('2d');
    if (window.monthlyChart) {
        window.monthlyChart.destroy();
    }
    
    window.monthlyChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: monthlyData.labels,
            datasets: [{
                label: 'Monthly Energy Production (MWh)',
                data: monthlyData.values,
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            aspectRatio: 2,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Energy (MWh)'
                    }
                }
            }
        }
    });
}

function updateDailyProfileCharts(hourlyData) {
    if (!hourlyData) return;
    
    // Power Profile Chart
    const powerCtx = document.getElementById('power-profile-chart').getContext('2d');
    const hours = Array.from({length: 24}, (_, i) => i);

    if (window.powerChart) {
        window.powerChart.destroy();
    }

    window.powerChart = new Chart(powerCtx, {
        type: 'line',
        data: {
            labels: hours,
            datasets: [{
                label: 'Power Output (kW)',
                data: hourlyData.power.slice(0, 24),
                borderColor: 'rgba(75, 192, 192, 1)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Power (kW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Temperature Profile Chart
    const tempCtx = document.getElementById('temperature-profile-chart').getContext('2d');
    
    if (window.tempChart) {
        window.tempChart.destroy();
    }

    window.tempChart = new Chart(tempCtx, {
        type: 'line',
        data: {
            labels: hours,
            datasets: [{
                label: 'Cell Temperature (°C)',
                data: hourlyData.temperature.slice(0, 24),
                borderColor: 'rgba(255, 99, 132, 1)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
}

function updateSystemInfo(systemInfo) {
    if (!systemInfo) return;
    
    $('#selected-module').text(systemInfo.module);
    $('#selected-inverter').text(systemInfo.inverter);
    $('#selected-tilt').text(systemInfo.tilt.toFixed(1) + '°');
    $('#selected-azimuth').text(systemInfo.azimuth.toFixed(1) + '°');
    $('#selected-temp-model').text(systemInfo.temp_model);
    $('#selected-mount').text(systemInfo.mount_type);
}

async function handleCalculate(event) {
    event.preventDefault();
    showLoading();

    // Get form data
    const formData = {
        latitude: parseFloat($('#latitude').val()),
        longitude: parseFloat($('#longitude').val()),
        system_size: parseFloat($('#system-size').val()),
        module: $('#module-name').val(),
        inverter: $('#inverter-name').val(),
        system_type: $('#system-type').val(),
        temp_model: $('#temp-model-family').val(),
        tilt: parseFloat($('#tilt').val()) || 30,
        azimuth: parseFloat($('#azimuth').val()) || 180,
        installed_cost: parseFloat($('#installed-cost').val()),
        electricity_rate: parseFloat($('#electricity-rate').val()),
        federal_tax_credit: parseFloat($('#federal-tax-credit').val()),
        state_tax_credit: parseFloat($('#state-tax-credit').val()),
        interest_rate: parseFloat($('#interest-rate').val()),
        project_life: parseInt($('#project-life').val()),
        maintenance_cost: parseFloat($('#maintenance-cost').val())
    };

    // Add temperature model parameters based on selected model
    if (formData.temp_model === 'sapm') {
        formData.temp_params = {
            a: parseFloat($('#param-a').val()),
            b: parseFloat($('#param-b').val()),
            deltaT: parseFloat($('#param-deltaT').val())
        };
    } else {
        formData.temp_params = {
            u_c: parseFloat($('#param-u-c').val()),
            u_v: parseFloat($('#param-u-v').val())
        };
    }

    console.log('Sending form data:', formData);

    // Send calculation request
    $.ajax({
        url: '/calculate',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            hideLoading();
            if (response.success) {
                // Update all visualizations
                updateSystemInfo(response);
                updateWeatherCharts(response.weather_data);
                updateSystemAnalysis(response.system_analysis);
                updateFinancialMetrics(response.financial_metrics);
                
                // Show success message
                showSuccess('Calculation completed successfully!');
                
                // Switch to results tab
                $('#resultsTabs a[href="#system-analysis"]').tab('show');
            } else {
                showError(response.error || 'Calculation failed. Please try again.');
            }
        },
        error: function(xhr, status, error) {
            hideLoading();
            showError('Server error: ' + error);
        }
    });
}

async function loadComponents() {
    try {
        // Load modules
        const moduleResponse = await fetch('/get_modules');
        if (!moduleResponse.ok) {
            throw new Error('Failed to fetch modules');
        }
        const moduleData = await moduleResponse.json();
        const moduleSelect = $('#module-name');
        moduleSelect.empty();

        if (moduleData.success && Array.isArray(moduleData.modules)) {
            moduleData.modules.forEach(module => {
                moduleSelect.append(new Option(module.replace(/_/g, ' '), module));
            });
        } else {
            throw new Error('Invalid module data format');
        }

        // Load inverters
        const inverterResponse = await fetch('/get_inverters');
        if (!inverterResponse.ok) {
            throw new Error('Failed to fetch inverters');
        }
        const inverterData = await inverterResponse.json();
        const inverterSelect = $('#inverter-name');
        inverterSelect.empty();

        if (inverterData.success && Array.isArray(inverterData.inverters)) {
            inverterData.inverters.forEach(inverter => {
                inverterSelect.append(new Option(inverter.replace(/_/g, ' '), inverter));
            });
        } else {
            throw new Error('Invalid inverter data format');
        }
    } catch (error) {
        console.error('Failed to load components:', error);
        showError('Failed to load modules and inverters. Please refresh the page.');
    }
}

function updateSystemInfo(response) {
    // Update system info in technical tab
    const info = response.system_info;
    if (info) {
        $('#selected-module').text(info.module_name || 'N/A');
        $('#selected-inverter').text(info.inverter_name || 'N/A');
        $('#selected-temp-model').text(info.temp_model || 'N/A');
        $('#selected-mount').text(info.mount_type || 'N/A');
        
        // Update technical details
        $('#modules-series').text(info.modules_per_string || 'N/A');
        $('#num-strings').text(info.strings_per_inverter || 'N/A');
        $('#total-modules').text(info.total_modules || 'N/A');
        $('#num-inverters').text(info.number_of_inverters || 'N/A');
        $('#dc-ac-ratio').text(info.dc_ac_ratio ? info.dc_ac_ratio.toFixed(2) : 'N/A');
        $('#peak-dc-power').text(info.peak_dc_power ? info.peak_dc_power.toFixed(2) + ' kW' : 'N/A');
        $('#peak-ac-power').text(info.peak_ac_power ? info.peak_ac_power.toFixed(2) + ' kW' : 'N/A');
    }
}

function updateWeatherCharts(data) {
    if (!data) return;
    
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    // GHI Chart
    const ghiCtx = document.getElementById('ghi-chart');
    if (ghiCtx && data.ghi) {
        if (ghiChart) {
            ghiChart.destroy();
        }
        ghiChart = new Chart(ghiCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: months,
                datasets: [{
                    label: 'Global Horizontal Irradiance (W/m²)',
                    data: data.ghi,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'GHI (W/m²)'
                        }
                    }
                }
            }
        });
    }

    // Update dashboard metrics
    if (data.total_production) {
        $('#total-production').text(data.total_production.toFixed(2) + ' kWh');
    }
    if (data.cost_savings) {
        $('#cost-savings').text('$' + data.cost_savings.toFixed(2));
    }
    if (data.payback_period) {
        $('#payback-period').text(data.payback_period.toFixed(2) + ' yrs');
    }
    if (data.co2_savings) {
        $('#co2-savings').text(data.co2_savings.toFixed(2) + ' tons');
    }
}

/* ----------------------------
   Event Handlers & Initialization
---------------------------- */
function setupEventHandlers() {
    // Form submission handler
    $('#pv-calculator-form').on('submit', handleCalculate);
    
    // Region change handler
    $('#region').on('change', function() {
        const region = $(this).val();
        const settings = defaults[region];
        
        $('#latitude').val(settings.lat);
        $('#longitude').val(settings.lon);
        $('#system-size').val(settings.systemSize);
        $('#installed-cost').val(settings.installedCost);
        $('#electricity-rate').val(settings.electricityRate);
        $('#federal-tax-credit').val(settings.federalTaxCredit);
        $('#state-tax-credit').val(settings.stateTaxCredit);
        $('#interest-rate').val(settings.interestRate);
        $('#project-life').val(settings.projectLife);
        $('#maintenance-cost').val(settings.maintenanceCost);
        $('#tilt').val(settings.tilt);
        $('#azimuth').val(settings.azimuth);
        
        // Update map location
        if (map && currentMarker) {
            currentMarker.setLatLng([settings.lat, settings.lon]);
            map.setView([settings.lat, settings.lon], 13);
        }
    });

    // Temperature model handlers
    $('#temp-model-family').on('change', function() {
        const model = $(this).val();
        $('.temp-model-params').hide();
        $(#${model}-params).show();
    });

    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();

    // Collapsible section handlers
    $('.card-header[data-bs-toggle="collapse"]').on('click', function() {
        $(this).find('.collapse-icon').toggleClass('rotated');
    });
}

function initializeForm() {
    // Set default values
    const region = $('#region').val() || 'bangladesh';
    const settings = defaults[region];
    
    $('#latitude').val(settings.lat);
    $('#longitude').val(settings.lon);
    $('#system-size').val(settings.systemSize);
    $('#installed-cost').val(settings.installedCost);
    $('#electricity-rate').val(settings.electricityRate);
    $('#federal-tax-credit').val(settings.federalTaxCredit);
    $('#state-tax-credit').val(settings.stateTaxCredit);
    $('#interest-rate').val(settings.interestRate);
    $('#project-life').val(settings.projectLife);
    $('#maintenance-cost').val(settings.maintenanceCost);
    $('#tilt').val(settings.tilt);
    $('#azimuth').val(settings.azimuth);

    // Show initial temperature model parameters
    const tempModel = $('#temp-model-family').val();
    $('.temp-model-params').hide();
    $(#${tempModel}-params).show();
}

async function loadComponents() {
    try {
        // Load modules
        const moduleResponse = await fetch('/get_modules');
        const modules = await moduleResponse.json();
        const moduleSelect = $('#module-name');
        modules.forEach(module => {
            moduleSelect.append(new Option(module, module));
        });

        // Load inverters
        const inverterResponse = await fetch('/get_inverters');
        const inverters = await inverterResponse.json();
        const inverterSelect = $('#inverter-name');
        inverters.forEach(inverter => {
            inverterSelect.append(new Option(inverter, inverter));
        });
    } catch (error) {
        console.error('Failed to load components:', error);
        showError('Failed to load modules and inverters. Please refresh the page.');
    }
}

function initMap() {
    // Check if map is already initialized
    if (map) {
        console.log('Map already initialized');
        return;
    }

    try {
        // Initialize the map
        map = L.map('map').setView([23.8103, 90.4125], 13);
        
        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: ' OpenStreetMap contributors'
        }).addTo(map);

        // Initialize the FeatureGroup to store editable layers
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        // Add initial marker
        currentMarker = L.marker([23.8103, 90.4125], {
            draggable: true
        }).addTo(map);

        // Update coordinates when marker is dragged
        currentMarker.on('dragend', function(event) {
            const position = event.target.getLatLng();
            $('#latitude').val(position.lat.toFixed(6));
            $('#longitude').val(position.lng.toFixed(6));
        });

        // Update marker when coordinates are changed manually
        $('#latitude, #longitude').on('change', function() {
            const lat = parseFloat($('#latitude').val());
            const lng = parseFloat($('#longitude').val());
            if (!isNaN(lat) && !isNaN(lng)) {
                currentMarker.setLatLng([lat, lng]);
                map.setView([lat, lng]);
            }
        });
    } catch (error) {
        console.error('Map initialization error:', error);
        showError('Failed to initialize map. Please refresh the page.');
    }
}

// Document ready handler
$(document).ready(function() {
    try {
        // Initialize in sequence
        initializeForm();
        setTimeout(() => {
            initMap();
            setupEventHandlers();
            loadComponents();
            
            // Show initial status
            $('#status-message')
                .removeClass('d-none alert-danger')
                .addClass('alert-info')
                .text('Ready to calculate. Fill in the form and click Calculate.');
            
        }, 100); // Small delay to ensure DOM is fully ready
            
    } catch (error) {
        console.error('Initialization error:', error);
        showError('Failed to initialize the application. Please refresh the page.');
    }
});

// Utility functions for showing/hiding loading and error messages
function showLoading() {
    $('#loading-spinner').removeClass('d-none');
    $('#calculateBtn').prop('disabled', true);
}

function hideLoading() {
    $('#loading-spinner').addClass('d-none');
    $('#calculateBtn').prop('disabled', false);
}

function showError(message) {
    $('#error-alert')
        .removeClass('d-none alert-info alert-success')
        .addClass('alert-danger')
        .text(message);
}

function showSuccess(message) {
    $('#error-alert')
        .removeClass('d-none alert-danger alert-info')
        .addClass('alert-success')
        .text(message);
}

function updateCharts(data) {
    // Update production charts
    updateProductionTab(data);
    
    // Update weather charts
    updateWeatherTab(data);
    
    // Update financial charts
    updateFinancialTab(data);
    
    // Update system analysis
    updateSystemAnalysis(data);
}

function updateDashboard(data) {
    // Update top dashboard metrics
    $('#total-production').text(Math.round(data.annual_energy).toLocaleString() + ' kWh');
    $('#cost-savings').text('$' + Math.round(data.annual_savings).toLocaleString());
    $('#payback-period').text(data.payback_period.toFixed(1) + ' yrs');
    $('#co2-savings').text(Math.round(data.co2_savings).toLocaleString() + ' tons');
}

function updateSystemAnalysis(data) {
    // Update system metrics
    $('#peak-power').text(data.peak_dc_power.toFixed(2) + ' kW');
    $('#annual-production').text(Math.round(data.annual_energy).toLocaleString() + ' kWh');
    $('#performance-ratio').text((data.performance_ratio * 100).toFixed(2) + '%');
    $('#capacity-factor').text((data.capacity_factor * 100).toFixed(2) + '%');
    
    // Update financial metrics
    $('#lcoe-value').text(data.lcoe.toFixed(3) + ' $/kWh');
    $('#npv-value').text('$' + Math.round(data.npv).toLocaleString());
}

function updateProductionTab(data) {
    if (!data.production_data) return;
    
    // Update daily production chart
    if (dailyProductionChart) {
        dailyProductionChart.destroy();
    }
    
    const ctx = document.getElementById('daily-production-chart').getContext('2d');
    dailyProductionChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: Array.from({length: 24}, (_, i) => ${i}:00),
            datasets: [{
                label: 'Hourly Production',
                data: data.production_data.daily,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Power (kW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Update monthly production chart
    if (monthlyProductionChart) {
        monthlyProductionChart.destroy();
    }
    
    const monthlyCtx = document.getElementById('monthly-production-chart').getContext('2d');
    monthlyProductionChart = new Chart(monthlyCtx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [{
                label: 'Monthly Production',
                data: data.production_data.monthly,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgb(75, 192, 192)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Energy (kWh)'
                    }
                }
            }
        }
    });
}

function updateWeatherTab(data) {
    if (!data.weather_data) return;
    
    // Update temperature profile chart
    if (temperatureChart) {
        temperatureChart.destroy();
    }
    
    const tempCtx = document.getElementById('temperature-profile-chart').getContext('2d');
    temperatureChart = new Chart(tempCtx, {
        type: 'line',
        data: {
            labels: Array.from({length: 24}, (_, i) => ${i}:00),
            datasets: [{
                label: 'Daily Temperature Profile',
                data: data.weather_data.temperature,
                borderColor: 'rgb(255, 99, 132)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Update monthly GHI chart
    if (monthlyGHIChart) {
        monthlyGHIChart.destroy();
    }
    
    const ghiCtx = document.getElementById('monthly-ghi-chart').getContext('2d');
    monthlyGHIChart = new Chart(ghiCtx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [{
                label: 'Monthly Solar Irradiance',
                data: data.weather_data.monthly_ghi,
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                borderColor: 'rgb(255, 159, 64)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'GHI (Wh/m²)'
                    }
                }
            }
        }
    });
}

function updateFinancialTab(data) {
    // Update financial metrics in the financial tab
    $('#lcoe-breakdown').text(data.lcoe.toFixed(3) + ' $/kWh');
    $('#payback-breakdown').text(data.payback_period.toFixed(1) + ' years');
    $('#savings-breakdown').text('$' + Math.round(data.annual_savings).toLocaleString());
    $('#npv-breakdown').text('$' + Math.round(data.npv).toLocaleString());
}

$(document).ready(function() {
    // Load modules
    $.get('/get_modules', function(response) {
        if (response.success) {
            const moduleSelect = $('#module-name');
            moduleSelect.empty();
            response.modules.forEach(module => {
                moduleSelect.append($('<option>', {
                    value: module,
                    text: module.replace(/_/g, ' ')
                }));
            });
        }
    });

    // Load inverters
    $.get('/get_inverters', function(response) {
        if (response.success) {
            const inverterSelect = $('#inverter-name');
            inverterSelect.empty();
            response.inverters.forEach(inverter => {
                inverterSelect.append($('<option>', {
                    value: inverter,
                    text: inverter.replace(/_/g, ' ')
                }));
            });
        }
    });

    // Handle temperature model changes
    $('#temp-model-family').change(function() {
        const model = $(this).val();
        if (model === 'pvsyst') {
            $('#sapm-params').hide();
            $('#pvsyst-params').show();
        } else {
            $('#pvsyst-params').hide();
            $('#sapm-params').show();
        }
    });

    // Set initial temperature model visibility
    $('#temp-model-family').trigger('change');
});

function getTemperatureModelParams() {
    const model = $('#temp-model-family').val();
    const systemType = $('#system-type').val();
    let params = {};
    
    if (model === 'pvsyst') {
        const mountType = $('#pvsyst-type').val();
        params = {
            model: 'pvsyst',
            mount_type: mountType,
            racking_model: mountType === 'freestanding' ? 'open_rack' : 'close_mount',
            module_type: 'glass_polymer',
            params: {
                u_c: parseFloat($('#param-u-c').val()) || 29.0,
                u_v: parseFloat($('#param-u-v').val()) || 0.0
            }
        };
    } else {
        const mountType = $('#sapm-type').val();
        params = {
            model: 'sapm',
            mount_type: mountType,
            racking_model: mountType.includes('open_rack') ? 'open_rack' : 'close_mount',
            module_type: mountType.includes('glass_glass') ? 'glass_glass' : 'glass_polymer',
            params: {
                a: parseFloat($('#param-a').val()) || -3.47,
                b: parseFloat($('#param-b').val()) || -0.0594,
                deltaT: parseFloat($('#param-deltaT').val()) || 3
            }
        };
    }
    
    return params;
}

function updateCharts(response) {
    if (!response || response.error) {
        console.error('Error in response:', response.error);
        return;
    }

    const data = response.data;
    
    // Update summary metrics
    updateSummaryMetrics(data.summary);
    
    // Update financial tab
    updateFinancialTab(data.summary);
    
    // Update monthly production chart
    updateMonthlyChart(data.monthly);
    
    // Update daily profile charts
    updateDailyProfileCharts(data.hourly);
    
    // Update system info
    updateSystemInfo(data.system_info);
}

function updateSummaryMetrics(summary) {
    if (!summary) return;
    
    $('#annual-energy').text(summary.annual_energy.toFixed(2));
    $('#capacity-factor').text(summary.capacity_factor.toFixed(2));
    $('#system-size-output').text(summary.system_size.toFixed(2));
}

function updateFinancialTab(summary) {
    if (!summary) return;
    
    $('#total-cost').text('$' + summary.total_cost.toFixed(2));
    $('#annual-revenue').text('$' + summary.annual_revenue.toFixed(2));
    $('#simple-payback').text(summary.simple_payback.toFixed(2));
}

function updateMonthlyChart(monthlyData) {
    if (!monthlyData) return;
    
    const ctx = document.getElementById('monthly-production-chart').getContext('2d');
    if (window.monthlyChart) {
        window.monthlyChart.destroy();
    }
    
    window.monthlyChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: monthlyData.labels,
            datasets: [{
                label: 'Monthly Energy Production (MWh)',
                data: monthlyData.values,
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            aspectRatio: 2,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Energy (MWh)'
                    }
                }
            }
        }
    });
}

function updateDailyProfileCharts(hourlyData) {
    if (!hourlyData) return;
    
    // Power Profile Chart
    const powerCtx = document.getElementById('power-profile-chart').getContext('2d');
    const hours = Array.from({length: 24}, (_, i) => i);

    if (window.powerChart) {
        window.powerChart.destroy();
    }

    window.powerChart = new Chart(powerCtx, {
        type: 'line',
        data: {
            labels: hours,
            datasets: [{
                label: 'Power Output (kW)',
                data: hourlyData.power.slice(0, 24),
                borderColor: 'rgba(75, 192, 192, 1)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Power (kW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Temperature Profile Chart
    const tempCtx = document.getElementById('temperature-profile-chart').getContext('2d');
    
    if (window.tempChart) {
        window.tempChart.destroy();
    }

    window.tempChart = new Chart(tempCtx, {
        type: 'line',
        data: {
            labels: hours,
            datasets: [{
                label: 'Cell Temperature (°C)',
                data: hourlyData.temperature.slice(0, 24),
                borderColor: 'rgba(255, 99, 132, 1)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
}

function updateSystemInfo(systemInfo) {
    if (!systemInfo) return;
    
    $('#selected-module').text(systemInfo.module);
    $('#selected-inverter').text(systemInfo.inverter);
    $('#selected-tilt').text(systemInfo.tilt.toFixed(1) + '°');
    $('#selected-azimuth').text(systemInfo.azimuth.toFixed(1) + '°');
    $('#selected-temp-model').text(systemInfo.temp_model);
    $('#selected-mount').text(systemInfo.mount_type);
}

async function handleCalculate(event) {
    event.preventDefault();
    showLoading();

    // Get form data
    const formData = {
        latitude: parseFloat($('#latitude').val()),
        longitude: parseFloat($('#longitude').val()),
        system_size: parseFloat($('#system-size').val()),
        module: $('#module-name').val(),
        inverter: $('#inverter-name').val(),
        system_type: $('#system-type').val(),
        temp_model: $('#temp-model-family').val(),
        tilt: parseFloat($('#tilt').val()) || 30,
        azimuth: parseFloat($('#azimuth').val()) || 180,
        installed_cost: parseFloat($('#installed-cost').val()),
        electricity_rate: parseFloat($('#electricity-rate').val()),
        federal_tax_credit: parseFloat($('#federal-tax-credit').val()),
        state_tax_credit: parseFloat($('#state-tax-credit').val()),
        interest_rate: parseFloat($('#interest-rate').val()),
        project_life: parseInt($('#project-life').val()),
        maintenance_cost: parseFloat($('#maintenance-cost').val())
    };

    // Add temperature model parameters based on selected model
    if (formData.temp_model === 'sapm') {
        formData.temp_params = {
            a: parseFloat($('#param-a').val()),
            b: parseFloat($('#param-b').val()),
            deltaT: parseFloat($('#param-deltaT').val())
        };
    } else {
        formData.temp_params = {
            u_c: parseFloat($('#param-u-c').val()),
            u_v: parseFloat($('#param-u-v').val())
        };
    }

    console.log('Sending form data:', formData);

    // Send calculation request
    $.ajax({
        url: '/calculate',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            hideLoading();
            if (response.success) {
                // Update all visualizations
                updateSystemInfo(response);
                updateWeatherCharts(response.weather_data);
                updateSystemAnalysis(response.system_analysis);
                updateFinancialMetrics(response.financial_metrics);
                
                // Show success message
                showSuccess('Calculation completed successfully!');
                
                // Switch to results tab
                $('#resultsTabs a[href="#system-analysis"]').tab('show');
            } else {
                showError(response.error || 'Calculation failed. Please try again.');
            }
        },
        error: function(xhr, status, error) {
            hideLoading();
            showError('Server error: ' + error);
        }
    });
}

async function loadComponents() {
    try {
        // Load modules
        const moduleResponse = await fetch('/get_modules');
        if (!moduleResponse.ok) {
            throw new Error('Failed to fetch modules');
        }
        const moduleData = await moduleResponse.json();
        const moduleSelect = $('#module-name');
        moduleSelect.empty();

        if (moduleData.success && Array.isArray(moduleData.modules)) {
            moduleData.modules.forEach(module => {
                moduleSelect.append(new Option(module.replace(/_/g, ' '), module));
            });
        } else {
            throw new Error('Invalid module data format');
        }

        // Load inverters
        const inverterResponse = await fetch('/get_inverters');
        if (!inverterResponse.ok) {
            throw new Error('Failed to fetch inverters');
        }
        const inverterData = await inverterResponse.json();
        const inverterSelect = $('#inverter-name');
        inverterSelect.empty();

        if (inverterData.success && Array.isArray(inverterData.inverters)) {
            inverterData.inverters.forEach(inverter => {
                inverterSelect.append(new Option(inverter.replace(/_/g, ' '), inverter));
            });
        } else {
            throw new Error('Invalid inverter data format');
        }
    } catch (error) {
        console.error('Failed to load components:', error);
        showError('Failed to load modules and inverters. Please refresh the page.');
    }
}

function updateSystemInfo(response) {
    // Update system info in technical tab
    const info = response.system_info;
    if (info) {
        $('#selected-module').text(info.module_name || 'N/A');
        $('#selected-inverter').text(info.inverter_name || 'N/A');
        $('#selected-temp-model').text(info.temp_model || 'N/A');
        $('#selected-mount').text(info.mount_type || 'N/A');
        
        // Update technical details
        $('#modules-series').text(info.modules_per_string || 'N/A');
        $('#num-strings').text(info.strings_per_inverter || 'N/A');
        $('#total-modules').text(info.total_modules || 'N/A');
        $('#num-inverters').text(info.number_of_inverters || 'N/A');
        $('#dc-ac-ratio').text(info.dc_ac_ratio ? info.dc_ac_ratio.toFixed(2) : 'N/A');
        $('#peak-dc-power').text(info.peak_dc_power ? info.peak_dc_power.toFixed(2) + ' kW' : 'N/A');
        $('#peak-ac-power').text(info.peak_ac_power ? info.peak_ac_power.toFixed(2) + ' kW' : 'N/A');
    }
}

function updateWeatherCharts(data) {
    if (!data) return;
    
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    // GHI Chart
    const ghiCtx = document.getElementById('ghi-chart');
    if (ghiCtx && data.ghi) {
        if (ghiChart) {
            ghiChart.destroy();
        }
        ghiChart = new Chart(ghiCtx.getContext('2d'), {
            type: 'line',
            data: {
                labels: months,
                datasets: [{
                    label: 'Global Horizontal Irradiance (W/m²)',
                    data: data.ghi,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    tension: 0.1,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: 2,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'GHI (W/m²)'
                        }
                    }
                }
            }
        });
    }

    // Update dashboard metrics
    if (data.total_production) {
        $('#total-production').text(data.total_production.toFixed(2) + ' kWh');
    }
    if (data.cost_savings) {
        $('#cost-savings').text('$' + data.cost_savings.toFixed(2));
    }
    if (data.payback_period) {
        $('#payback-period').text(data.payback_period.toFixed(2) + ' yrs');
    }
    if (data.co2_savings) {
        $('#co2-savings').text(data.co2_savings.toFixed(2) + ' tons');
    }
}

/* ----------------------------
   Event Handlers & Initialization
---------------------------- */
function setupEventHandlers() {
    // Form submission handler
    $('#pv-calculator-form').on('submit', handleCalculate);
    
    // Region change handler
    $('#region').on('change', function() {
        const region = $(this).val();
        const settings = defaults[region];
        
        $('#latitude').val(settings.lat);
        $('#longitude').val(settings.lon);
        $('#system-size').val(settings.systemSize);
        $('#installed-cost').val(settings.installedCost);
        $('#electricity-rate').val(settings.electricityRate);
        $('#federal-tax-credit').val(settings.federalTaxCredit);
        $('#state-tax-credit').val(settings.stateTaxCredit);
        $('#interest-rate').val(settings.interestRate);
        $('#project-life').val(settings.projectLife);
        $('#maintenance-cost').val(settings.maintenanceCost);
        $('#tilt').val(settings.tilt);
        $('#azimuth').val(settings.azimuth);
        
        // Update map location
        if (map && currentMarker) {
            currentMarker.setLatLng([settings.lat, settings.lon]);
            map.setView([settings.lat, settings.lon], 13);
        }
    });

    // Temperature model handlers
    $('#temp-model-family').on('change', function() {
        const model = $(this).val();
        $('.temp-model-params').hide();
        $(#${model}-params).show();
    });

    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();

    // Collapsible section handlers
    $('.card-header[data-bs-toggle="collapse"]').on('click', function() {
        $(this).find('.collapse-icon').toggleClass('rotated');
    });
}

function initializeForm() {
    // Set default values
    const region = $('#region').val() || 'bangladesh';
    const settings = defaults[region];
    
    $('#latitude').val(settings.lat);
    $('#longitude').val(settings.lon);
    $('#system-size').val(settings.systemSize);
    $('#installed-cost').val(settings.installedCost);
    $('#electricity-rate').val(settings.electricityRate);
    $('#federal-tax-credit').val(settings.federalTaxCredit);
    $('#state-tax-credit').val(settings.stateTaxCredit);
    $('#interest-rate').val(settings.interestRate);
    $('#project-life').val(settings.projectLife);
    $('#maintenance-cost').val(settings.maintenanceCost);
    $('#tilt').val(settings.tilt);
    $('#azimuth').val(settings.azimuth);

    // Show initial temperature model parameters
    const tempModel = $('#temp-model-family').val();
    $('.temp-model-params').hide();
    $(#${tempModel}-params).show();
}

async function loadComponents() {
    try {
        // Load modules
        const moduleResponse = await fetch('/get_modules');
        const modules = await moduleResponse.json();
        const moduleSelect = $('#module-name');
        modules.forEach(module => {
            moduleSelect.append(new Option(module, module));
        });

        // Load inverters
        const inverterResponse = await fetch('/get_inverters');
        const inverters = await inverterResponse.json();
        const inverterSelect = $('#inverter-name');
        inverters.forEach(inverter => {
            inverterSelect.append(new Option(inverter, inverter));
        });
    } catch (error) {
        console.error('Failed to load components:', error);
        showError('Failed to load modules and inverters. Please refresh the page.');
    }
}

function initMap() {
    // Check if map is already initialized
    if (map) {
        console.log('Map already initialized');
        return;
    }

    try {
        // Initialize the map
        map = L.map('map').setView([23.8103, 90.4125], 13);
        
        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: ' OpenStreetMap contributors'
        }).addTo(map);

        // Initialize the FeatureGroup to store editable layers
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        // Add initial marker
        currentMarker = L.marker([23.8103, 90.4125], {
            draggable: true
        }).addTo(map);

        // Update coordinates when marker is dragged
        currentMarker.on('dragend', function(event) {
            const position = event.target.getLatLng();
            $('#latitude').val(position.lat.toFixed(6));
            $('#longitude').val(position.lng.toFixed(6));
        });

        // Update marker when coordinates are changed manually
        $('#latitude, #longitude').on('change', function() {
            const lat = parseFloat($('#latitude').val());
            const lng = parseFloat($('#longitude').val());
            if (!isNaN(lat) && !isNaN(lng)) {
                currentMarker.setLatLng([lat, lng]);
                map.setView([lat, lng]);
            }
        });
    } catch (error) {
        console.error('Map initialization error:', error);
        showError('Failed to initialize map. Please refresh the page.');
    }
}

// Document ready handler
$(document).ready(function() {
    try {
        // Initialize in sequence
        initializeForm();
        setTimeout(() => {
            initMap();
            setupEventHandlers();
            loadComponents();
            
            // Show initial status
            $('#status-message')
                .removeClass('d-none alert-danger')
                .addClass('alert-info')
                .text('Ready to calculate. Fill in the form and click Calculate.');
            
        }, 100); // Small delay to ensure DOM is fully ready
            
    } catch (error) {
        console.error('Initialization error:', error);
        showError('Failed to initialize the application. Please refresh the page.');
    }
});

// Utility functions for showing/hiding loading and error messages
function showLoading() {
    $('#loading-spinner').removeClass('d-none');
    $('#calculateBtn').prop('disabled', true);
}

function hideLoading() {
    $('#loading-spinner').addClass('d-none');
    $('#calculateBtn').prop('disabled', false);
}

function showError(message) {
    $('#error-alert')
        .removeClass('d-none alert-info alert-success')
        .addClass('alert-danger')
        .text(message);
}

function showSuccess(message) {
    $('#error-alert')
        .removeClass('d-none alert-danger alert-info')
        .addClass('alert-success')
        .text(message);
}

function updateCharts(data) {
    // Update production charts
    updateProductionTab(data);
    
    // Update weather charts
    updateWeatherTab(data);
    
    // Update financial charts
    updateFinancialTab(data);
    
    // Update system analysis
    updateSystemAnalysis(data);
}

function updateDashboard(data) {
    // Update top dashboard metrics
    $('#total-production').text(Math.round(data.annual_energy).toLocaleString() + ' kWh');
    $('#cost-savings').text('$' + Math.round(data.annual_savings).toLocaleString());
    $('#payback-period').text(data.payback_period.toFixed(1) + ' yrs');
    $('#co2-savings').text(Math.round(data.co2_savings).toLocaleString() + ' tons');
}

function updateSystemAnalysis(data) {
    // Update system metrics
    $('#peak-power').text(data.peak_dc_power.toFixed(2) + ' kW');
    $('#annual-production').text(Math.round(data.annual_energy).toLocaleString() + ' kWh');
    $('#performance-ratio').text((data.performance_ratio * 100).toFixed(2) + '%');
    $('#capacity-factor').text((data.capacity_factor * 100).toFixed(2) + '%');
    
    // Update financial metrics
    $('#lcoe-value').text(data.lcoe.toFixed(3) + ' $/kWh');
    $('#npv-value').text('$' + Math.round(data.npv).toLocaleString());
}

function updateProductionTab(data) {
    if (!data.production_data) return;
    
    // Update daily production chart
    if (dailyProductionChart) {
        dailyProductionChart.destroy();
    }
    
    const ctx = document.getElementById('daily-production-chart').getContext('2d');
    dailyProductionChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: Array.from({length: 24}, (_, i) => ${i}:00),
            datasets: [{
                label: 'Hourly Production',
                data: data.production_data.daily,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Power (kW)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Update monthly production chart
    if (monthlyProductionChart) {
        monthlyProductionChart.destroy();
    }
    
    const monthlyCtx = document.getElementById('monthly-production-chart').getContext('2d');
    monthlyProductionChart = new Chart(monthlyCtx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [{
                label: 'Monthly Production',
                data: data.production_data.monthly,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgb(75, 192, 192)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Energy (kWh)'
                    }
                }
            }
        }
    });
}

function updateWeatherTab(data) {
    if (!data.weather_data) return;
    
    // Update temperature profile chart
    if (temperatureChart) {
        temperatureChart.destroy();
    }
    
    const tempCtx = document.getElementById('temperature-profile-chart').getContext('2d');
    temperatureChart = new Chart(tempCtx, {
        type: 'line',
        data: {
            labels: Array.from({length: 24}, (_, i) => ${i}:00),
            datasets: [{
                label: 'Daily Temperature Profile',
                data: data.weather_data.temperature,
                borderColor: 'rgb(255, 99, 132)',
                tension: 0.1,
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    title: {
                        display: true,
                        text: 'Temperature (°C)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Hour of Day'
                    }
                }
            }
        }
    });
    
    // Update monthly GHI chart
    if (monthlyGHIChart) {
        monthlyGHIChart.destroy();
    }
    
    const ghiCtx = document.getElementById('monthly-ghi-chart').getContext('2d');
    monthlyGHIChart = new Chart(ghiCtx, {
        type: 'bar',
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            datasets: [{
                label: 'Monthly Solar Irradiance',
                data: data.weather_data.monthly_ghi,
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                borderColor: 'rgb(255, 159, 64)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'GHI (Wh/m²)'
                    }
                }
            }
        }
    });
}

function updateFinancialTab(data) {
    // Update financial metrics in the financial tab
    $('#lcoe-breakdown').text(data.lcoe.toFixed(3) + ' $/kWh');
    $('#payback-breakdown').text(data.payback_period.toFixed(1) + ' years');
    $('#savings-breakdown').text('$' + Math.round(data.annual_savings).toLocaleString());
    $('#npv-breakdown').text('$' + Math.round(data.npv).toLocaleString());
}

$(document).ready(function() {
    // Load modules
    $.get('/get_modules', function(response) {
        if (response.success) {
            const moduleSelect = $('#module-name');
            moduleSelect.empty();
            response.modules.forEach(module => {
                moduleSelect.append($('<option>', {
                    value: module,
                    text: module.replace(/_/g, ' ')
                }));
            });
        }
    });

    // Load inverters
    $.get('/get_inverters', function(response) {
        if (response.success) {
            const inverterSelect = $('#inverter-name');
            inverterSelect.empty();
            response.inverters.forEach(inverter => {
                inverterSelect.append($('<option>', {
                    value: inverter,
                    text: inverter.replace(/_/g, ' ')
                }));
            });
        }
    });

    // Handle temperature model changes
    $('#temp-model-family').change(function() {
        const model = $(this).val();
        if (model === 'pvsyst') {
            $('#sapm-params').hide();
            $('#pvsyst-params').show();
        } else {
            $('#pvsyst-params').hide();
            $('#sapm-params').show();
        }
    });

    // Set initial temperature model visibility
    $('#temp-model-family').trigger('change');
});

